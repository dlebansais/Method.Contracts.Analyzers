<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MCA1001AnalyzerDescription" xml:space="preserve">
    <value>Verified method must be private.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1001AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' must be private</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1001AnalyzerTitle" xml:space="preserve">
    <value>Verified method must be private</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1002AnalyzerDescription" xml:space="preserve">
    <value>Verified method must be within a class, struct or record, and within a namespace.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1002AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' must be within type</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1002AnalyzerTitle" xml:space="preserve">
    <value>Verified method must be within type</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1003AnalyzerDescription" xml:space="preserve">
    <value>Verified method is missing the 'verified' suffix.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1003AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' is missing the '{1}' suffix</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1003AnalyzerTitle" xml:space="preserve">
    <value>Verified method is missing verified suffix</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1004AnalyzerDescription" xml:space="preserve">
    <value>Attribute is missing argument.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1004AnalyzerMessageFormat" xml:space="preserve">
    <value>Attribute '{0}' is missing argument</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1004AnalyzerTitle" xml:space="preserve">
    <value>Attribute is missing argument</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1005AnalyzerDescription" xml:space="preserve">
    <value>Access attribute argument must be a valid modifier.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1005AnalyzerMessageFormat" xml:space="preserve">
    <value>Argument at position {0} in Access attribute must be a valid modifier</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1005AnalyzerTitle" xml:space="preserve">
    <value>Access attribute argument must be a valid modifier</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1006AnalyzerDescription" xml:space="preserve">
    <value>RequireNotNull attribute argument must be a valid parameter name.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1006AnalyzerMessageFormat" xml:space="preserve">
    <value>Argument at position {0} in RequireNotNull attribute must be a valid parameter name</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1006AnalyzerTitle" xml:space="preserve">
    <value>RequireNotNull attribute argument must be a valid parameter name</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1007AnalyzerDescription" xml:space="preserve">
    <value>RequireNotNull attribute with Alias, Type or Name can specify only one parameter name.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1007AnalyzerMessageFormat" xml:space="preserve">
    <value>Argument at position {0} in RequireNotNull attribute cannot be a parameter name</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1007AnalyzerTitle" xml:space="preserve">
    <value>RequireNotNull attribute has too many arguments</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1008AnalyzerDescription" xml:space="preserve">
    <value>RequireNotNull attribute uses invalid alias.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1008AnalyzerMessageFormat" xml:space="preserve">
    <value>Alias '{0}' in RequireNotNull attribute is invalid</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1008AnalyzerTitle" xml:space="preserve">
    <value>RequireNotNull attribute uses invalid alias</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1009AnalyzerDescription" xml:space="preserve">
    <value>RequireNotNull attribute uses invalid type.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1009AnalyzerMessageFormat" xml:space="preserve">
    <value>Type '{0}' in RequireNotNull attribute is invalid</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1009AnalyzerTitle" xml:space="preserve">
    <value>RequireNotNull attribute uses invalid type</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1010AnalyzerDescription" xml:space="preserve">
    <value>RequireNotNull attribute uses invalid name.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1010AnalyzerMessageFormat" xml:space="preserve">
    <value>Name '{0}' in RequireNotNull attribute is invalid</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1010AnalyzerTitle" xml:space="preserve">
    <value>RequireNotNull attribute uses invalid name</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1011AnalyzerDescription" xml:space="preserve">
    <value>Require attribute argument must be valid.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1011AnalyzerMessageFormat" xml:space="preserve">
    <value>Argument at position {0} in Require attribute must be valid</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1011AnalyzerTitle" xml:space="preserve">
    <value>Require attribute argument must be valid</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1013AnalyzerDescription" xml:space="preserve">
    <value>Ensure attribute argument must be valid.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1013AnalyzerMessageFormat" xml:space="preserve">
    <value>Argument at position {0} in Ensure attribute must be valid</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1013AnalyzerTitle" xml:space="preserve">
    <value>Ensure attribute argument must be valid</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1012AnalyzerDescription" xml:space="preserve">
    <value>Require attribute with DebugOnly can specify only one expression.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1012AnalyzerMessageFormat" xml:space="preserve">
    <value>Argument at position {0} in Require attribute cannot be an expression</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1012AnalyzerTitle" xml:space="preserve">
    <value>Require attribute has too many arguments</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1014AnalyzerDescription" xml:space="preserve">
    <value>Ensure attribute with DebugOnly can specify only one expression.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1014AnalyzerMessageFormat" xml:space="preserve">
    <value>Argument at position {0} in Ensure attribute cannot be an expression</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1014AnalyzerTitle" xml:space="preserve">
    <value>Ensure attribute has too many arguments</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA2001AnalyzerDescription" xml:space="preserve">
    <value>Object must be initialized with a call to the specified method.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA2001AnalyzerMessageFormat" xml:space="preserve">
    <value>Object must be initialized with a call to the '{0}' method</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA2001AnalyzerTitle" xml:space="preserve">
    <value>Object must be initialized</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA2002AnalyzerDescription" xml:space="preserve">
    <value>InitializeWith attribute argument must be a valid method name.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA2002AnalyzerMessageFormat" xml:space="preserve">
    <value>Method '{0}' not found</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA2002AnalyzerTitle" xml:space="preserve">
    <value>InitializeWith attribute argument must be a valid method name</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA2003AnalyzerDescription" xml:space="preserve">
    <value>InitializeWith attribute not allowed in class with explicit constructors.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA2003AnalyzerMessageFormat" xml:space="preserve">
    <value>InitializeWith attribute not allowed in class '{0}' with explicit constructors</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA2003AnalyzerTitle" xml:space="preserve">
    <value>InitializeWith attribute not allowed in class with explicit constructors</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1015AnalyzerDescription" xml:space="preserve">
    <value>Set a parameter as unused before a return statement.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1015AnalyzerMessageFormat" xml:space="preserve">
    <value>Set parameter '{0}' as unused before return</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1015AnalyzerTitle" xml:space="preserve">
    <value>Set parameter as unused before return</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1016AnalyzerDescription" xml:space="preserve">
    <value>Only use Contract.Unused with parameters.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1016AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' is not a parameter, only use Contract.Unused with parameters</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1016AnalyzerTitle" xml:space="preserve">
    <value>Only use Contract.Unused with parameters</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1017AnalyzerDescription" xml:space="preserve">
    <value>Verified property must be private.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1017AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' must be private</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1017AnalyzerTitle" xml:space="preserve">
    <value>Verified property must be private</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1018AnalyzerDescription" xml:space="preserve">
    <value>Verified property must be within a class, struct or record, and within a namespace.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1018AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' must be within type</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1018AnalyzerTitle" xml:space="preserve">
    <value>Verified property must be within type</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="MCA1019AnalyzerDescription" xml:space="preserve">
    <value>Verified property is missing the 'verified' suffix.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="MCA1019AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' is missing the '{1}' suffix</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="MCA1019AnalyzerTitle" xml:space="preserve">
    <value>Verified property is missing verified suffix</value>
    <comment>The title of the diagnostic.</comment>
  </data>
</root>